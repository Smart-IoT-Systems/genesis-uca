{
    "dm": {
        "name": "demo",
        "components": [{
                "name": "Arduino",
                "properties": [],
                "id": "arduino",
                "ip": "127.0.0.1",
                "port": ["80", "22"],
                "credentials": {
                    "login": "ubuntu",
                    "password": "ubuntu"
                },
                "_type": "device",
                "physical_port": "",
                "device_type": ""
        }, {
                "name": "RaspberryPi",
                "properties": [],
                "id": "raspberrypi",
                "ip": "192.168.43.245",
                "port": ["2376"],
                "credentials": {
                    "login": "ubuntu",
                    "password": "ubuntu"
                },
                "_type": "docker_host"
        }, {
                "name": "RaspberryPi2",
                "properties": [],
                "id": "raspberrypi2",
                "ip": "192.168.43.245",
                "port": ["2376"],
                "credentials": {
                    "login": "ubuntu",
                    "password": "ubuntu"
                },
                "_type": "docker_host"
        }, {
                "name": "AWS_VM",
                "properties": [],
                "id": "awsvm",
                "ip": "127.0.0.1",
                "port": ["80", "22"],
                "credentials": {
                    "login": "ubuntu",
                    "password": "ubuntu"
                },
                "_type": "vm_host"
        }, {
                "name": "DisplayControl",
                "properties": [],
                "id": "displaycontrol",
                "id_host": "RaspberryPi",
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "1882": "1880"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "node_red",
                "port": "1882"
        }, {
                "name": "DisplayMessage",
                "properties": [],
                "id": "displaymessage",
                "id_host": "Arduino",
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "22": "22",
                        "80": "80"
                    },
                    "devices": {
                        "PathOnHost": "",
                        "PathInContainer": "",
                        "CgroupPermissions": "rwm"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "thingml",
                "port": "1880",
                "nr_description": {
                    "node": [{
                        "id": "2b256dc3.f77caa",
                        "type": "thingml",
                        "z": "8e558623.7d71",
                        "name": "MainCfg",
                        "deviceId": "Thing",
                        "target": "arduino",
                        "code": "thing Main includes GatewayCommandMsgs , DisplayMsgs , TimerMsgs {\n\trequired port clock {\n\t\tsends timer_start sends timer_cancel receives timer_timeout\n\t}\n\trequired port gateway {\n\t\tsends button_pushed receives clear_screen receives display_digit\n\t}\n\trequired port display {\n\t\tsends create sends destroy sends update sends clear sends setColor sends setBGColor sends drawRect sends fillRect sends drawInteger sends drawThingML receives displayReady receives displayError\n\t}\n\treadonly property XDISPSIZE : UInt8 = 160\n\treadonly property YDISPSIZE : UInt8 = 128\n\tproperty bgcolor : UInt8 [ 3 ]\n\tproperty fgcolor : UInt8 [ 3 ]\n\tproperty value : Int16 = 64\n\tfunction initColors() do\n\t\tbgcolor[0] = 53\n\t\tbgcolor[1] = 40\n\t\tbgcolor[2] = 120\n\t\tfgcolor[0] = 107\n\t\tfgcolor[1] = 94\n\t\tfgcolor[2] = 174\n\t\tdisplay!setBGColor(bgcolor [0], bgcolor [1], bgcolor [2])\n\t\tdisplay!setColor(fgcolor [0], fgcolor [1], fgcolor [2])\n\tend\n\tfunction clearScreen() do\n\t\tinitColors()\n\t\tdisplay!setColor(255, 255, 255)\n\t\tdisplay!fillRect(8, 30, 142, 76)\n\t\tdisplay!setColor(fgcolor [0], fgcolor [1], fgcolor [2])\n\t\tdisplay!fillRect(9, 31, 140, 50)\n\t\tdisplay!setBGColor(fgcolor [0], fgcolor [1], fgcolor [2])\n\t\tdisplay!drawThingML(26, 87)\n\t\tdisplay!update()\n\tend\n\tfunction drawValue() do\n\t\tdisplay!setColor(200, 255, 170)\n\t\tdisplay!drawInteger(23, 40, value, 5, 6)\n\t\tdisplay!update()\n\tend\n\tstatechart Main init START {\n\t\ton entry do\n\t\t\tdisplay!create(XDISPSIZE, YDISPSIZE)\n\t\t\tdisplay!clear()\n\t\t\tinitColors()\n\t\t\tclock!timer_start(1, 50)\n\t\tend\n\t\tstate START {\n\t\t\ton entry do\n\t\t\t\tclearScreen()\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent gateway?clear_screen\n\t\t\taction do\n\t\t\t\tclock!timer_start(0, 100)\n\t\t\t\tvalue = 0\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent m : gateway?display_digit\n\t\t\taction do\n\t\t\t\tvalue = value * 10 + m.d\n\t\t\t\tclock!timer_start(0, 100)\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent t : clock?timer_timeout\n\t\t\tguard t.id == 0\n\t\t\taction do\n\t\t\t\tdrawValue()\n\t\t\tend\n\t\t}\n\t\tinternal\n\t\tevent t : clock?timer_timeout\n\t\tguard t.id == 1\n\t\taction do\n\t\t\tvar a : Int16 = 'analogRead(3)'\n\t\t\tif (a > 205 and a < 300) do\n\t\t\t\tdisplay!setColor(255, 50, 0)\n\t\t\t\tdisplay!drawRect(0, 0, XDISPSIZE - 1, YDISPSIZE - 1)\n\t\t\t\tdisplay!drawRect(1, 1, XDISPSIZE - 3, YDISPSIZE - 3)\n\t\t\t\tclock!timer_start(1, 500)\n\t\t\t\tgateway!button_pushed()\n\t\t\tend\n\t\t\telse do\n\t\t\t\tdisplay!setColor(0, 0, 0)\n\t\t\t\tdisplay!drawRect(0, 0, XDISPSIZE - 1, YDISPSIZE - 1)\n\t\t\t\tdisplay!drawRect(1, 1, XDISPSIZE - 3, YDISPSIZE - 3)\n\t\t\t\tclock!timer_start(1, 50)\n\t\t\tend\n\t\tend\n\t}\n}\nthing fragment SerialMsgs {\n\tmessage receive_byte(b : Byte)\n\tmessage write_byte(b : Byte)\n\tmessage print_message(msg : String)\n}\nthing Serial includes SerialMsgs {\n\tprovided port rx {\n\t\tsends receive_byte\n\t}\n\tprovided port tx {\n\t\treceives write_byte receives print_message\n\t}\n\tstatechart SerialImpl init Receiving {\n\t\tstate Receiving {\n\t\t\ton entry 'Serial.begin(9600);'\n\t\t\tinternal guard 'Serial.available()' > 0\n\t\t\taction rx!receive_byte('(char)Serial.read()')\n\t\t}\n\t\tinternal\n\t\tevent b : tx?write_byte\n\t\taction do\n\t\t\t'Serial.write(' & b.b & ');'\n\t\tend\n\t}\n}\nthing fragment GatewayCommandMsgs {\n\tmessage clear_screen()\n\tmessage display_digit(d : Int8)\n\tmessage button_pushed()\n}\nthing GatewayCommandParser includes SerialMsgs , GatewayCommandMsgs {\n\trequired port blerx {\n\t\treceives receive_byte\n\t}\n\trequired port bletx @sync_send \"true\" {\n\t\tsends write_byte sends print_message\n\t}\n\tprovided port gateway {\n\t\tsends clear_screen sends display_digit receives button_pushed\n\t}\n\tstatechart GatewayCommandParserSC init Ready {\n\t\tstate Ready {\n\t\t\tinternal\n\t\t\tevent m : blerx?receive_byte\n\t\t\tguard m.b == '\\'!\\''\n\t\t\taction gateway!clear_screen()\n\t\t\tinternal\n\t\t\tevent m : blerx?receive_byte\n\t\t\tguard m.b > 47 and m.b < 58\n\t\t\taction gateway!display_digit((m.b - 48))\n\t\t}\n\t\tinternal\n\t\tevent gateway?button_pushed\n\t\taction bletx!write_byte('\\'?\\'')\n\t}\n}\nthing DisplayArduino includes Display @c_header \"\n#include <Adafruit_GFX.h>    // Core graphics library\n#include <Adafruit_ST7735.h> // Hardware-specific library\n#include <SPI.h>\n\n#define TFT_CS     10\n#define TFT_RST    9\n#define TFT_DC     8\" @c_global \"Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS,  TFT_DC, TFT_RST);\" {\n\tproperty XFRAMESIZE : UInt16\n\tproperty YFRAMESIZE : UInt16\n\tproperty color : UInt16 = 'ST7735_BLACK'\n\tfunction initDisplay(xsize : UInt8, ysize : UInt8) do\n\t'tft.initR(INITR_BLACKTAB);\n\t\ttft.fillScreen(ST7735_BLACK);\n\t\ttft.setRotation(3);'\n\tend\n\tfunction destroyDisplay() do\n\t\tclearScreen()\n\tend\n\tfunction clearScreen() do\n\t'tft.fillScreen(ST7735_BLACK);'\n\tend\n\tfunction setColor(r : UInt8, g : UInt8, b : UInt8) do\n\t\tcolor = 'tft.Color565(' & r & ', ' & g & ', ' & b & ')'\n\tend\n\tfunction drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do\n\t\t'tft.drawRect(' & x & ',' & y & ',' & width & ',' & height & ',' & color & ');'\n\tend\n\tfunction fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) do\n\t\t'tft.fillRect(' & x & ',' & y & ',' & width & ',' & height & ',' & color & ');'\n\tend\n\tfunction updateDisplay() do\n\tend\n}\nthing fragment TimerMsgs {\n\tmessage timer_start(id : UInt8, time : UInt32)\n\t@timer_start \"true\" message timer_cancel(id : UInt8)\n\t@timer_cancel \"true\" message timer_timeout(id : UInt8)\n\t@timeout \"true\"\n\tmessage io_clock()\n\t@xms_tic \"10\" message fps_clock()\n\t@xms_tic \"33\" message ui_clock()\n\t@xms_tic \"231\"\n}\ndatatype Char<1>\n\t@type_checker \"Integer\"\n\t@c_type \"char\"\n\t@c_byte_size \"1\"\nobject String\n\t@type_checker \"String\"\n\t@c_type \"char *\"\n\t@c_byte_size \"2\"\ndatatype Boolean<1>\n\t@type_checker \"Boolean\"\n\t@c_type \"uint8_t\"\n\t@c_byte_size \"1\"\ndatatype UInt8<1>\n\t@type_checker \"Integer\"\n\t@c_type \"uint8_t\"\n\t@c_byte_size \"1\"\ndatatype UInt16<2>\n\t@type_checker \"Integer\"\n\t@c_type \"uint16_t\"\n\t@c_byte_size \"2\"\n\t@java_type \"int\"\n\t@java_primitive \"true\"\ndatatype Int8<1>\n\t@type_checker \"Integer\"\n\t@c_type \"int8_t\"\n\t@c_byte_size \"1\"\ndatatype Int16<2>\n\t@type_checker \"Integer\"\n\t@c_type \"int16_t\"\n\t@c_byte_size \"2\"\ndatatype UInt32<4>\n\t@type_checker \"Integer\"\n\t@c_type \"uint32_t\"\n\t@c_byte_size \"4\"\ndatatype Integer<2>\n\t@type_checker \"Integer\"\n\t@c_type \"int16_t\"\n\t@c_byte_size \"2\"\ndatatype Long<4>\n\t@type_checker \"Integer\"\n\t@c_type \"long\"\n\t@c_byte_size \"4\"\ndatatype Float<4>\n\t@type_checker \"Real\"\n\t@c_type \"float\"\n\t@c_byte_size \"4\"\nenumeration DigitalState\n\t@c_byte_size \"1\"\n\t@c_type \"uint8_t\"\n\t{\n\tLOW @enum_val \"0\"\n\tHIGH @enum_val \"1\"\n}\ndatatype Byte<1>\n\t@type_checker \"Integer\"\n\t@c_type \"uint8_t\"\n\t@c_byte_size \"1\"\n\t@java_type \"byte\"\n\t@java_primitive \"true\"\n\t@scala_type \"Byte\"\n\t@SenML_type \"Double\"\nenumeration DigitalState\n\t@c_type \"uint8_t\"\n\t@c_byte_size \"1\"\n\t{\n\tLOW @enum_val \"0\"\n\tHIGH @enum_val \"1\"\n}\nthing fragment DisplayMsgs {\n\tmessage clear()\n\tmessage setColor(r : UInt8, g : UInt8, b : UInt8)\n\tmessage setBGColor(r : UInt8, g : UInt8, b : UInt8)\n\tmessage drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)\n\tmessage fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8)\n\tmessage drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8)\n\tmessage drawThingML(x : UInt8, y : UInt8)\n\tmessage create(xsize : UInt8, ysize : UInt8)\n\tmessage destroy()\n\tmessage update()\n\tmessage displayReady()\n\tmessage displayError()\n}\nthing fragment Display includes DisplayMsgs {\n\tprovided port display {\n\t\tsends displayReady sends displayError receives create receives destroy receives update receives clear receives setColor receives setBGColor receives drawRect receives fillRect receives drawInteger receives drawThingML\n\t}\n\tproperty bg_r : UInt8 = 0\n\tproperty bg_g : UInt8 = 0\n\tproperty bg_b : UInt8 = 0\n\tproperty fg_r : UInt8 = 0\n\tproperty fg_g : UInt8 = 0\n\tproperty fg_b : UInt8 = 0\n\tabstract function initDisplay(xsize : UInt8, ysize : UInt8) @abstract \"true\"\n\n\tabstract function destroyDisplay() @abstract \"true\"\n\n\tabstract function updateDisplay() @abstract \"true\"\n\n\tabstract function clearScreen() @abstract \"true\"\n\n\tabstract function setColor(r : UInt8, g : UInt8, b : UInt8) @abstract \"true\"\n\n\tabstract function drawRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) @abstract \"true\"\n\n\tabstract function fillRect(x : UInt8, y : UInt8, width : UInt8, height : UInt8) @abstract \"true\"\n\n\tfunction drawDigit(x : UInt8, y : UInt8, d : UInt8, size : UInt8) do\n\t\tif (d < 1) do\n\t\t\tfillRect(x, y, size, 5 * size)\n\t\t\tfillRect(x, y, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\tend\n\t\telse if (d < 2) do\n\t\t\tfillRect(x + size, y, size, 5 * size)\n\t\tend\n\t\telse if (d < 3) do\n\t\t\tfillRect(x, y, size * 3, size)\n\t\t\tfillRect(x + 2 * size, y, size, 3 * size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\t\tfillRect(x, y + 2 * size, size, 3 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\tend\n\t\telse if (d < 4) do\n\t\t\tfillRect(x, y, size * 3, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\t\tfillRect(x + size, y + 2 * size, 2 * size, size)\n\t\tend\n\t\telse if (d < 5) do\n\t\t\tfillRect(x, y, size, 3 * size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\tend\n\t\telse if (d < 6) do\n\t\t\tfillRect(x, y, size * 3, size)\n\t\t\tfillRect(x, y, size, 3 * size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y + 2 * size, size, 3 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\tend\n\t\telse if (d < 7) do\n\t\t\tfillRect(x, y, size * 3, size)\n\t\t\tfillRect(x, y, size, 5 * size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y + 2 * size, size, 3 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\tend\n\t\telse if (d < 8) do\n\t\t\tfillRect(x, y, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\tend\n\t\telse if (d < 9) do\n\t\t\tfillRect(x, y, size, 5 * size)\n\t\t\tfillRect(x, y, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\tend\n\t\telse do\n\t\t\tfillRect(x, y, size, 3 * size)\n\t\t\tfillRect(x, y, 3 * size, size)\n\t\t\tfillRect(x + 2 * size, y, size, 5 * size)\n\t\t\tfillRect(x, y + 4 * size, 3 * size, size)\n\t\t\tfillRect(x, y + 2 * size, 3 * size, size)\n\t\tend\n\tend\n\tfunction drawThingML(px : Int16, py : Int16) do\n\t\tsetColor(255, 255, 255)\n\t\tfillRect(px, py, 108, 13)\n\t\tvar x : Int16 = px + 1\n\t\tvar y : Int16 = py + 1\n\t\tsetColor(80, 80, 80)\n\t\tfillRect(x + 0, y + 0, 12, 2)\n\t\tfillRect(x + 5, y + 0, 2, 11)\n\t\tfillRect(x + 18, y + 0, 2, 11)\n\t\tfillRect(x + 27, y + 0, 2, 11)\n\t\tfillRect(x + 18, y + 5, 11, 2)\n\t\tfillRect(x + 36, y + 0, 2, 11)\n\t\tfillRect(x + 44, y + 0, 2, 11)\n\t\tfillRect(x + 46, y + 1, 1, 3)\n\t\tfillRect(x + 47, y + 2, 1, 3)\n\t\tfillRect(x + 48, y + 3, 1, 3)\n\t\tfillRect(x + 49, y + 4, 1, 3)\n\t\tfillRect(x + 50, y + 5, 1, 3)\n\t\tfillRect(x + 51, y + 6, 1, 3)\n\t\tfillRect(x + 52, y + 7, 1, 3)\n\t\tfillRect(x + 53, y + 0, 2, 11)\n\t\tfillRect(x + 62, y + 0, 2, 11)\n\t\tfillRect(x + 62, y + 0, 12, 2)\n\t\tfillRect(x + 62, y + 9, 12, 2)\n\t\tfillRect(x + 62, y + 9, 12, 2)\n\t\tfillRect(x + 69, y + 5, 5, 2)\n\t\tfillRect(x + 72, y + 7, 2, 2)\n\t\tsetColor(232, 141, 10)\n\t\tfillRect(x + 80, y + 0, 11, 2)\n\t\tfillRect(x + 80, y + 0, 2, 11)\n\t\tfillRect(x + 85, y + 0, 2, 11)\n\t\tfillRect(x + 89, y + 0, 2, 11)\n\t\tfillRect(x + 95, y + 0, 2, 11)\n\t\tfillRect(x + 95, y + 9, 11, 2)\n\tend\n\tfunction drawInteger(x : UInt8, y : UInt8, v : Int16, digits : UInt8, scale : UInt8) do\n\t\tclearInteger(x, y, digits, scale)\n\t\tvar val : Int16 = v\n\t\tvar d : UInt8 = digits\n\t\twhile (d > 0) do\n\t\t\tdrawDigit(x + (d - 1) * 4 * scale, y, val % 10, scale)\n\t\t\tval = val / 10\n\t\t\td = d - 1\n\t\tend\n\tend\n\tfunction clearInteger(x : UInt8, y : UInt8, digits : UInt8, scale : UInt8) do\n\t\tsetColor(bg_r, bg_g, bg_b)\n\t\tfillRect(x, y, (digits * 4 - 1) * scale, 5 * scale)\n\t\tsetColor(fg_r, fg_g, fg_b)\n\tend\n\tstatechart SC init Wait {\n\t\tstate Wait {\n\t\t\ttransition -> Running\n\t\t\tevent e : display?create\n\t\t\taction initDisplay(e.xsize, e.ysize)\n\t\t}\n\t\tstate Running {\n\t\t\ton entry do\n\t\t\t\tdisplay!displayReady()\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent e : display?setColor\n\t\t\taction do\n\t\t\t\tfg_r = e.r\n\t\t\t\tfg_g = e.g\n\t\t\t\tfg_b = e.b\n\t\t\t\tsetColor(e.r, e.g, e.b)\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent e : display?setBGColor\n\t\t\taction do\n\t\t\t\tbg_r = e.r\n\t\t\t\tbg_g = e.g\n\t\t\t\tbg_b = e.b\n\t\t\tend\n\t\t\tinternal\n\t\t\tevent e : display?clear\n\t\t\taction clearScreen()\n\t\t\tinternal\n\t\t\tevent e : display?drawRect\n\t\t\taction drawRect(e.x, e.y, e.width, e.height)\n\t\t\tinternal\n\t\t\tevent e : display?fillRect\n\t\t\taction fillRect(e.x, e.y, e.width, e.height)\n\t\t\tinternal\n\t\t\tevent e : display?update\n\t\t\taction updateDisplay()\n\t\t\tinternal\n\t\t\tevent e : display?drawInteger\n\t\t\taction drawInteger(e.x, e.y, e.v, e.digits, e.scale)\n\t\t\tinternal\n\t\t\tevent e : display?drawThingML\n\t\t\taction drawThingML(e.x, e.y)\n\t\t\ttransition -> Destroyed\n\t\t\tevent display?destroy\n\t\t\taction destroyDisplay()\n\t\t}\n\t\tstate Destroyed {\n\t\t}\n\t}\n}\nprotocol Timer ;\n\nprotocol Timer ;\n\nconfiguration MainCfg {\n\tinstance main : Main\n\tinstance disp : DisplayArduino\n\tinstance uart : Serial\n\tinstance gwcmd : GatewayCommandParser\n\tconnector main.clock over Timer\n\tconnector main.display => disp . display\n\tconnector gwcmd.bletx => uart . tx\n\tconnector gwcmd.blerx => uart . rx\n\tconnector main.gateway => gwcmd . gateway\n}\n",
                        "port": "/dev/ttyACM0",
                        "ardtype": "uno",
                        "source": "",
                        "cpu": "",
                        "libraries": "[\"Adafruit GFX Library\",\"Adafruit ST7735 Library\"]",
                        "x": 407,
                        "y": 247,
                        "wires": [[]]
        }]
                }
            },
            {
                "name": "ControlTemp",
                "properties": [],
                "id": "controltemp",
                "id_host": "RaspberryPi2",
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "1880": "1880"
                    },
                    "devices": {
                        "PathOnHost": "/dev/ttyUSB0",
                        "PathInContainer": "/dev/ttyUSB0",
                        "CgroupPermissions": "rwm"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "node_red",
                "port": "1880"
                },
            {
                "name": "Aggregate",
                "properties": [],
                "id": "aggregate",
                "id_host": "RaspberryPi",
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "1881": "1880"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "node_red",
                "port": "1881"
                },
            {
                "name": "CouchDB",
                "properties": [],
                "id": "couchdb",
                "id_host": "AWS_VM",
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "22": "22",
                        "80": "80"
                    },
                    "devices": {
                        "PathOnHost": "",
                        "PathInContainer": "",
                        "CgroupPermissions": "rwm"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "software",
                "port": "1880"
                },
            {
                "name": "rfxcom2",
                "properties": [],
                "id": "rfxcom2",
                "id_host": null,
                "docker_resource": {
                    "name": "a resource",
                    "image": "ubuntu",
                    "command": "",
                    "port_bindings": {
                        "22": "22",
                        "80": "80"
                    },
                    "devices": {
                        "PathOnHost": "",
                        "PathInContainer": "",
                        "CgroupPermissions": "rwm"
                    }
                },
                "ssh_resource": {
                    "name": "a resource",
                    "startCommand": "",
                    "downloadCommand": "",
                    "configureCommand": ""
                },
                "_type": "rfxcom",
                "port": "1880",
                "nr_description": {
                    "package": "node-red-contrib-rfxcom",
                    "node": [{
                        "id": "20d1732e.942b84",
                        "type": "rfx-sensor",
                        "z": "36abed84.04bdb2",
                        "name": "",
                        "port": "b60198b5.e6fb28",
                        "topicSource": "all",
                        "topic": "",
                        "x": 282.5,
                        "y": 363,
                        "wires": [[]]
                }, {
                        "id": "b60198b5.e6fb28",
                        "type": "rfxtrx-port",
                        "z": "",
                        "port": "/dev/ttyUSB0",
                        "rfyVenetianMode": "EU"
                }]
                }
                }],
        "links": [{
            "name": "to_couch",
            "properties": [],
            "id": "a_unique_id",
            "src": "Aggregate",
            "target": "CouchDB",
            "isControl": false
        }, {
            "name": "to_aggregate",
            "properties": [],
            "id": "a_unique_id",
            "src": "DisplayControl",
            "target": "Aggregate",
            "isControl": false
        }, {
            "name": "to_aggregate2",
            "properties": [],
            "id": "a_unique_id",
            "src": "ControlTemp",
            "target": "Aggregate",
            "isControl": false
        }, {
            "name": "to_temp",
            "properties": [],
            "id": "a_unique_id",
            "src": "Aggregate",
            "target": "ControlTemp",
            "isControl": false
        }, {
            "name": "controldisplaymessage",
            "properties": [],
            "id": "a_unique_id",
            "src": "DisplayControl",
            "target": "DisplayMessage",
            "isControl": true
        }, {
            "name": "super_test",
            "properties": [],
            "id": "a_unique_id",
            "src": "ControlTemp",
            "target": "rfxcom2",
            "isControl": true
        }]
    },
    "graph": {
        "elements": {
            "nodes": [{
                "data": {
                    "id": "Arduino"
                },
                "position": {
                    "x": 528.1944602506286,
                    "y": -43.57144018413529
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "device"
            }, {
                "data": {
                    "id": "RaspberryPi"
                },
                "position": {
                    "x": 696.0287750831167,
                    "y": 14.781739902817485
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "container"
            }, {
                "data": {
                    "id": "RaspberryPi2"
                },
                "position": {
                    "x": 693.2867151393802,
                    "y": 186.6359150370828
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "container"
            }, {
                "data": {
                    "id": "AWS_VM"
                },
                "position": {
                    "x": 864.7837299974426,
                    "y": 28.334314832488026
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "vm"
            }, {
                "data": {
                    "id": "rfxcom2"
                },
                "position": {
                    "x": 519.9983634785824,
                    "y": 165.6279993415824
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "ControlTemp",
                    "parent": "RaspberryPi2"
                },
                "position": {
                    "x": 693.2867151393802,
                    "y": 186.6359150370828
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "node_red"
            }, {
                "data": {
                    "id": "DisplayMessage",
                    "parent": "Arduino"
                },
                "position": {
                    "x": 528.1944602506286,
                    "y": -43.57144018413529
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "DisplayControl",
                    "parent": "RaspberryPi"
                },
                "position": {
                    "x": 653.2718300741657,
                    "y": -9.678580138101468
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "node_red"
            }, {
                "data": {
                    "id": "Aggregate",
                    "parent": "RaspberryPi"
                },
                "position": {
                    "x": 738.7857200920677,
                    "y": 39.242059943736436
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "node_red"
            }, {
                "data": {
                    "id": "CouchDB",
                    "parent": "AWS_VM"
                },
                "position": {
                    "x": 864.7837299974426,
                    "y": 28.334314832488026
                },
                "group": "nodes",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }],
            "edges": [{
                "data": {
                    "id": "to_couch",
                    "source": "Aggregate",
                    "target": "CouchDB"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "to_aggregate",
                    "source": "DisplayControl",
                    "target": "Aggregate"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "to_aggregate2",
                    "source": "ControlTemp",
                    "target": "Aggregate"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "to_temp",
                    "source": "Aggregate",
                    "target": "ControlTemp"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": ""
            }, {
                "data": {
                    "id": "controldisplaymessage",
                    "source": "DisplayControl",
                    "target": "DisplayMessage"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "control"
            }, {
                "data": {
                    "id": "super_test",
                    "source": "ControlTemp",
                    "target": "rfxcom2"
                },
                "position": {},
                "group": "edges",
                "removed": false,
                "selected": false,
                "selectable": true,
                "locked": false,
                "grabbable": true,
                "classes": "control"
            }]
        },
        "style": [{
            "selector": "node",
            "style": {
                "label": "data(id)",
                "background-fit": "contain",
                "background-image-opacity": "0.3",
                "text-valign": "center",
                "text-halign": "center",
                "font-size": "4px",
                "font-weight": "bold"
            }
        }, {
            "selector": "node.container",
            "style": {
                "padding": "10px",
                "text-valign": "top",
                "text-halign": "center",
                "background-color": "#DDD",
                "font-size": "8px",
                "font-weight": "normal",
                "shape": "rectangle",
                "background-image": "./img/docker-official.svg"
            }
        }, {
            "selector": "edge",
            "style": {
                "curve-style": "bezier",
                "target-arrow-shape": "triangle"
            }
        }, {
            "selector": "edge.control",
            "style": {
                "background-color": "#B47",
                "curve-style": "bezier",
                "target-arrow-shape": "circle"
            }
        }, {
            "selector": ":selected",
            "style": {
                "background-color": "black",
                "line-color": "black",
                "target-arrow-color": "black",
                "source-arrow-color": "black"
            }
        }, {
            "selector": "node.questionable",
            "style": {
                "border-color": "#A33",
                "background-color": "#B55",
                "shape": "roundrectangle"
            }
        }, {
            "selector": "node.node_red",
            "style": {
                "background-image": "./img/node-red-256.png"
            }
        }, {
            "selector": "node.device",
            "style": {
                "padding": "10px",
                "text-valign": "top",
                "text-halign": "center",
                "background-color": "#DDD",
                "font-size": "8px",
                "font-weight": "normal",
                "shape": "rectangle",
                "background-image": "./img/device.png"
            }
        }, {
            "selector": "node.vm",
            "style": {
                "padding": "10px",
                "text-valign": "top",
                "text-halign": "center",
                "background-color": "#DDD",
                "font-size": "8px",
                "font-weight": "normal",
                "shape": "rectangle",
                "background-image": "./img/server_cloud.png"
            }
        }],
        "zoomingEnabled": true,
        "userZoomingEnabled": true,
        "zoom": 1.3061708881318483,
        "minZoom": 1e-50,
        "maxZoom": 1e+50,
        "panningEnabled": true,
        "userPanningEnabled": true,
        "pan": {
            "x": -141.55786984730173,
            "y": 219.15347804949477
        },
        "boxSelectionEnabled": false,
        "renderer": {
            "name": "canvas"
        }
    }
}