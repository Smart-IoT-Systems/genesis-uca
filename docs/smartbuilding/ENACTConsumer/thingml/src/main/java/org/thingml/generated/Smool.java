/**
 * File generated by the ThingML IDE
 * /!\Do not edit this file/!\
 * In case of a bug in the generated code,
 * please submit an issue on our GitHub
 **/

package org.thingml.generated;

import no.sintef.jasm.*;
import no.sintef.jasm.ext.*;

import org.thingml.generated.api.*;
import org.thingml.generated.messages.*;

import java.util.*;

/**
 * Definition for type : Smool
 **/
public class Smool extends Component implements ISmool_LightingData, ISmool_TemperatureData {

private boolean debug = false;
public boolean isDebug() {return debug;}
public void setDebug(boolean debug) {this.debug = debug;}
public String toString() {
String result = "instance " + getName() + "\n";
result += "";
return result;
}

public synchronized void lightingSensorData_via_LightingData(double CustomDataSender_lightingSensorData_sensorData_var){
final Event _msg = lightingSensorDataType.instantiate(CustomDataSender_lightingSensorData_sensorData_var);
_msg.setPort(LightingData_port);
receive(_msg);
}

public synchronized void temperatureSensorData_via_TemperatureData(double CustomDataSender_temperatureSensorData_sensorData_var){
final Event _msg = temperatureSensorDataType.instantiate(CustomDataSender_temperatureSensorData_sensorData_var);
_msg.setPort(TemperatureData_port);
receive(_msg);
}

private void sendLightingSensorData_via_LightingData(double CustomDataSender_lightingSensorData_sensorData_var){
LightingData_port.send(lightingSensorDataType.instantiate(CustomDataSender_lightingSensorData_sensorData_var));
}

private void sendTemperatureSensorData_via_TemperatureData(double CustomDataSender_temperatureSensorData_sensorData_var){
TemperatureData_port.send(temperatureSensorDataType.instantiate(CustomDataSender_temperatureSensorData_sensorData_var));
}

//Attributes
//Ports
private Port LightingData_port;
private Port TemperatureData_port;
//Message types
protected final LightingSensorDataMessageType lightingSensorDataType = new LightingSensorDataMessageType();
protected final TemperatureSensorDataMessageType temperatureSensorDataType = new TemperatureSensorDataMessageType();
//Empty Constructor
public Smool() {
super();
}

//Getters and Setters for non readonly/final attributes
//Getters for Ports
public Port getLightingData_port() {
return LightingData_port;
}
public Port getTemperatureData_port() {
return TemperatureData_port;
}
private CompositeState buildSmool_client(){
final AtomicState state_Smool_client_main = new AtomicState("main");
Handler h142099757 = new Handler();
h142099757.from(state_Smool_client_main);
h142099757.event(temperatureSensorDataType);
h142099757.port(TemperatureData_port);
h142099757.action((Event e)->{
final TemperatureSensorDataMessageType.TemperatureSensorDataMessage temperatureSensorData = (TemperatureSensorDataMessageType.TemperatureSensorDataMessage) e;
System.out.println(""+("Java Service Endpoint received sensorData: Temperature = " + temperatureSensorData.sensorData));
});

final CompositeState state_Smool_client = new CompositeState("client");
state_Smool_client.onEntry(()->{
System.out.println(""+("Project name: ENACTConsumer"));
 
			try{ 
				ENACTConsumer.logic.ConsumerMain.main(new String[0]);
			}catch(Exception e){ 
				e.printStackTrace();
			}	
			
});
state_Smool_client.add(state_Smool_client_main);
state_Smool_client.initial(state_Smool_client_main);
return state_Smool_client;
}

public Component buildBehavior(String session, Component root) {
if (root == null) {
//Init ports
LightingData_port = new Port("LightingData", this);
TemperatureData_port = new Port("TemperatureData", this);
} else {
LightingData_port = ((Smool)root).LightingData_port;
TemperatureData_port = ((Smool)root).TemperatureData_port;
}
if (session == null){
//Init state machine
behavior = buildSmool_client();
}
return this;
}

}
