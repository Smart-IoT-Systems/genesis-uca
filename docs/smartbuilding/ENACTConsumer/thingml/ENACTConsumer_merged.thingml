thing Smool includes CustomDataSender @src `../src` @maven_dep `<dependency><groupId>org.smool.kpi</groupId><artifactId>common</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi</groupId><artifactId>connector</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi.connector</groupId><artifactId>tcpip</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi</groupId><artifactId>model</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi.model</groupId><artifactId>direct</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi.model</groupId><artifactId>smart</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>org.smool.kpi</groupId><artifactId>ssap</artifactId><version>2.2.4</version></dependency>` @maven_dep `<dependency><groupId>javax.xml</groupId><artifactId>jsr173</artifactId><version>1.0</version></dependency>` @maven_dep `<dependency><groupId>log4j</groupId><artifactId>log4j</artifactId><version>1.2.9</version></dependency>` @maven_dep `<dependency><groupId>xalan</groupId><artifactId>xalan</artifactId><version>2.6.0</version></dependency>` @maven_dep `<dependency><groupId>com.sun.xml.stream</groupId><artifactId>sjsxp</artifactId><version>1.0.2</version></dependency>` @maven_dep `<dependency><groupId>org.apache.commons</groupId><artifactId>commons-lang3</artifactId><version>3.1</version></dependency>` @maven_dep `
<dependency>
  <groupId>org.eclipse.paho</groupId>
  <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
  <version>1.2.0</version>
</dependency>` @maven_dep `
<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>2.6.2</version>
</dependency>` @maven_repo `<repository><id>smool_remote</id><url>http://smool.tecnalia.com:8080</url></repository>` {
	statechart client init main {
		on entry do
			println "Project name: ENACTConsumer"
		` 
			try{ 
				ENACTConsumer.logic.ConsumerMain.main(new String[0]);
			}catch(Exception e){ 
				e.printStackTrace();
			}	
			`
		end
		state main {
			internal
			event s : TemperatureData?temperatureSensorData
			action do
				println "Java Service Endpoint received sensorData: Temperature = " + s.sensorData
			end
		}
	}
}
thing fragment CustomDataSender {
	message lightingSensorData(sensorData : Double)
	message temperatureSensorData(sensorData : Double)
	provided port LightingData @sync_send `true` {
		sends lightingSensorData receives lightingSensorData
	}
	provided port TemperatureData @sync_send `true` {
		sends temperatureSensorData receives temperatureSensorData
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@arduino_type `String`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
configuration ENACTConsumer {
	instance obj : Smool
}
